name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      trigger_reason:
        description: 'Reason for manual test trigger'
        required: false
        default: 'Manual trigger'

jobs:
  test-kindwrind:
    name: Test kindwrind Functionality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read version information
        id: version
        run: |
          # Read Kind version from VERSION file - it must exist
          if [ -f VERSION ]; then
            KIND_VERSION=$(cat VERSION)
          else
            echo "ERROR: VERSION file not found!"
            exit 1
          fi
          echo "kind_version=${KIND_VERSION}" >> $GITHUB_OUTPUT
          echo "Using Kind version: ${KIND_VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build kindwrind image
        run: |
          docker buildx build \
            --build-arg KIND_VERSION=${{ steps.version.outputs.kind_version }} \
            --load \
            -t binbashing/kindwrind:test \
            .

      - name: Set up kubeconfig
        run: |
          # Ensure kubeconfig directory and file exist
          mkdir -p ~/.kube
          touch ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Start kindwrind using Docker Compose
        run: |
          export TAG_OVERRIDE=test 
          docker compose up -d --wait --wait-timeout 90

      - name: Test registry functionality
        run: |
          # Pull a test image
          docker pull nginx:alpine
          
          # Tag for local registry
          docker tag nginx:alpine localhost:5000/nginx-test:latest
          
          # Push to local registry
          docker push localhost:5000/nginx-test:latest
      
      - name: Test kubectl functionality
        run: |          
          # Verify kubectl is working
          kubectl cluster-info

      - name: Test Kubernetes functionality
        run: | 
          # Create deployment using the image from local registry
          kubectl create deployment test-nginx --image=localhost:5000/nginx-test:latest
          
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=60s deployment/test-nginx

          # Wait for pods to be fully ready
          kubectl wait --for=condition=ready --timeout=30s pod -l app=test-nginx

      - name: Clean up
        if: always()
        run: |
          docker compose down || true